@using System.ComponentModel.DataAnnotations
@using MyFirstServerSideBlazor.Authentification
@using MyFirstServerSideBlazor.Authentification.Contracts
@using System.Text.RegularExpressions
@using Blazored.LocalStorage

@inject IJSRuntime JSRuntime
@inject IUserServise UserServise
@inject IAccessTokenServise TokenServise
@inject ILocalStorageService LocalStorageServise
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager

@layout LoginBody
@page "/SignWithMud"


<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="First name" HelperText="Max. 50 characters"
                              @bind-Value="model.Username" For="@(() => model.Username)"/>
                <MudTextField Label="Email" Class="mt-3"
                              @bind-Value="model.Email" For="@(() => model.Email)"/>
                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                              @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
                <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                              @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
            @if (success)
            {
                <MudText Color="Color.Success">Success</MudText>
            }
            else
            {
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudText Typo="Typo.body2" Align="Align.Center">
            Fill out the form correctly to see the success message.
        </MudText>
    </MudItem>
</MudGrid>
</EditForm>
@code {
    [Parameter]
    public EventCallback ChangePageCallback { get; set; }
    public bool validationErrors { get; set; }
    public string UserName { get; set; }
    public string Password { get; set; }

    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(50, ErrorMessage = "Name length can't be more than 50.")]
        public string Username { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

    protected async Task SignUpAction()
    {
        validationErrors = OnValidSubmit();

        if (validationErrors== true)
        {
            var result = await UserServise.CreateUser(UserName, Password);

            if (result.IsSuccessfull)
            {
                await LocalStorageServise.SetItemAsync("MyFirstServerSideBlazorsFirstToken", TokenServise.CreateAccessToken(result.Content));
                ((TokenAuthenticationStateProviderServise)AuthProvider).UserAuthenticated(result.Content);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var validationErrors = new List<string>();
                validationErrors.Add(result.Error);
            }
        }
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

}