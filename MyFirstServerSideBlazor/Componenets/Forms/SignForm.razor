@using Blazored.LocalStorage
@using MyFirstServerSideBlazor.Authentification
@using MyFirstServerSideBlazor.Authentification.Contracts
@using System.Text.RegularExpressions

@inject IJSRuntime JSRuntime
@inject IUserServise UserServise
@inject IAccessTokenServise TokenServise
@inject ILocalStorageService LocalStorageServise
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager

@layout LoginBody
@page "/SignPage"

<div class="SignMainContainer ShowTransition">
    <div class="SignContainer">
        <img src="https://api.logo.com/api/v2/images?format=webp&logo=logo_2c5042ea-632d-4f85-9519-9a3dd390f8e5&width=1000&background=transparent&u=1659042533" />
    </div>
    <div class="TextBoxesContainer1">
       <input @bind="@UserName" placeholder="User"/>
       <input type="password" @bind="@Password" placeholder="Pass"/>
       <input type="password" @bind="@RetypePassword" placeholder="Retype Pass"/>
    </div>
    <div class="ButtonsContainer">
        
        @{
            if((validationErrors?.Count() ?? 0) >0){
                <ul>
                    @{
                        foreach(var error in validationErrors)
                        {
                            <li class="InvalidPass">@error</li>
                        }
                    }
                </ul>                    
            }
         }
        
        <input id="signIn" @onclick="SignUpAction" type="button" value="Sign In" />
        
    </div>
</div>


<style>
    #signIn{
        
    }

    ul{
        padding-left: 70px;
        margin-top: 40px;
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
    }

    .InvalidPass{
        
        color: red;
        font-size: 10px;
        min-width: 55%;
        display: block;
        text-align: start;
        
    }

    .ButtonsContainer{
        display: flex;
        @*flex-direction:row-reverse;*@
        flex-wrap:wrap;
        justify-content:center;
        align-content: center;
        @*align-items:flex-start;*@
        width: 100% !important;
       

    }

    .ButtonsContainer input{
        height: 40px;
        width: 100px;
        border: none;
        background: #f69d3c;
        border-radius: 10px;
        box-shadow: rgb(0 0 0 / 15%) 1.95px 1.95px 2.6px;
        color: white;
        font-size: 18px;
        outline: 1px solid #227a561c;
    }

    .ButtonsContainer input:hover{
        height: 40px;
        width: 100px;
        border: none;
        background: #3f87a6;
        border-radius: 10px;
        box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
        color: white;
        font-size: 18px;
        outline: 1px solid #227a561c;
        transition: 0.5s;
    }

    .ButtonsContainer input:active{
        height: 40px;
        width: 100px;
        border: none;
        background: #398b69;
        border-radius: 10px;
        box-shadow: rgb(0 0 0 / 50%) 1.95px 1.95px 2.6px inset;
        color: white;
        font-size: 18px;
        outline: 1px solid #227a561c;
        transition: 0.5s;
    }

    .SignContainer{
        display: flex;
        justify-content: center;
        align-content: center;
        width: 100% !important;
    }

    .SignContainer img{
        height: 150px;
        margin-top: 20px;
    }
    
    .TextBoxesContainer1{
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-content: center;
        margin-top: 140px;
        width: 100% !important;
    }

     .TextBoxesContainer1 input{
        margin: 10px;
        margin-left: 200px;
        margin-right: 200px;
        width: 100% !important;
        outline: 0;
        height: 35px;
        font-size: 18px;
        padding: 10px;
        padding-left: 30px;
        padding-right: 30px;
        border: none;
        border-radius: 10px;
        box-shadow: rgb(0 0 0 / 5%) 0px 6px 24px 0px, rgb(0 0 0 / 8%) 0px 0px 0px 1px, rgb(0 0 0 / 12%) 0px 3px 4px;
    }

    .TextBoxesContainer1 input:hover{
        margin: 10px;
        margin-left: 150px;
        margin-right: 150px;
        width: 100% !important;
        outline: 0;
        height: 35px;
        font-size: 18px;
        padding: 10px;
        padding-left: 30px;
        padding-right: 30px;
        border: none;
        border-radius: 10px;
        box-shadow: rgb(0 0 0 / 5%) 0px 6px 24px 0px inset, rgb(0 0 0 / 8%) 0px 0px 0px 1px inset, rgb(0 0 0 / 9%) 0px 4px 5px;
        transition: 0.67s;
    }

    .SignMainContainer.hide{
        width: 1px;
        height: 450px;
        margin: 20px;
        border-radius: 40px;
        margin-top: -150px;
        box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
        background-color: #f7f7f7;
        flex-wrap: wrap;
        transition: 0.41s;
    }

    .SignMainContainer.hide div img{
        opacity: 0;
    }

     .SignMainContainer.ShowTransition div img{
        opacity: 1;
    }
    
    .SignMainContainer.hide div{
        width: 1px;
        height: 1px;
        display: none;
        transition: 1s;
    }
    
    .SignMainContainer.ShowTransition div{
        width: 1px;
        height: 1px;
        transition: 1s;        
    }
    
    .SignMainContainer.ShowTransition{
        display: flex;
        width: 600px;
        height: 500px;
        margin: 20px;
        border-radius: 20px;
        margin-top: -450px;
        box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
        background-color: #ffffff96;
        flex-wrap: wrap;
        transition: 0.41s;
    }
    
    .SignMainContainer:hover
    {
        box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;
    }

</style>

@code {
     [Parameter]
    public EventCallback ChangePageCallback { get; set; }

    public string UserName { get; set; }
    public string Password { get; set; }
    public string RetypePassword { get; set; }
    public List<string> validationErrors { get; set; }




    protected async Task SignUpAction()
    {
    validationErrors = ValidateInputs();

    if (validationErrors.Count() == 0)
    {
          var result = await UserServise.CreateUser(UserName, Password);

            if (result.IsSuccessfull)
            {
                await LocalStorageServise.SetItemAsync("MyFirstServerSideBlazorsFirstToken", TokenServise.CreateAccessToken(result.Content));
                ((TokenAuthenticationStateProviderServise)AuthProvider).UserAuthenticated(result.Content);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var validationErrors = new List<string>();
                validationErrors.Add(result.Error);
            }
    }
    }

    protected List<string> ValidateInputs()
    {
        validationErrors = new List<string>();
        var regexForNumber = new Regex(@"\d");
        var regexForSymbols = new Regex(@"[^\p{L}\d\s@#]");

        if(!(Password.Length > 6))
        {
            validationErrors.Add("Slaptažodis turi būti ilgesnis nei 6 simboliai");
        }
        if (Password != RetypePassword)
        {
            validationErrors.Add("Slaptažodžiai nesutampa");
        }
        if (!regexForNumber.IsMatch(Password))
        {
            validationErrors.Add("Slaptažodis turi turėti, bent vieną skaičių (0-9)");
        }
        if (!regexForSymbols.IsMatch(Password))
        {
            validationErrors.Add("Slaptažodis turi turėti, bent vieną iš šių simbolių (!#$%^&*)");
        }
        return validationErrors;
    }
}
